use crate::input::Key;
use anyhow::anyhow;

pub type PythonKey = String;

impl TryFrom<PythonKey> for Key {
    type Error = anyhow::Error;

    fn try_from(value: PythonKey) -> std::result::Result<Self, Self::Error> {
        let key = match value.as_str() {
            "Alt" => Key::Alt,
            "Backspace" => Key::Backspace,
            "CapsLock" => Key::CapsLock,
            "Control" => Key::Control,
            "Delete" => Key::Delete,
            "DownArrow" => Key::DownArrow,
            "End" => Key::End,
            "Escape" => Key::Escape,
            "F1" => Key::F1,
            "F2" => Key::F2,
            "F3" => Key::F3,
            "F4" => Key::F4,
            "F5" => Key::F5,
            "F6" => Key::F6,
            "F7" => Key::F7,
            "F8" => Key::F8,
            "F9" => Key::F9,
            "F10" => Key::F10,
            "F11" => Key::F11,
            "F12" => Key::F12,
            "F13" => Key::F13,
            "F14" => Key::F14,
            "F15" => Key::F15,
            "F16" => Key::F16,
            "F17" => Key::F17,
            "F18" => Key::F18,
            "F19" => Key::F19,
            "F20" => Key::F20,
            "Home" => Key::Home,
            "LeftArrow" => Key::LeftArrow,
            "Meta" => Key::Meta,
            "PageDown" => Key::PageDown,
            "PageUp" => Key::PageUp,
            "Return" => Key::Return,
            "RightArrow" => Key::RightArrow,
            "Shift" => Key::Shift,
            "Space" => Key::Space,
            "Tab" => Key::Tab,
            "UpArrow" => Key::UpArrow,
            "LeftBracket" => Key::LeftBracket,
            "RightBracket" => Key::RightBracket,
            "Num1" => Key::Num1,
            "Num2" => Key::Num2,
            "Num3" => Key::Num3,
            "Num4" => Key::Num4,
            "Num5" => Key::Num5,
            "Num6" => Key::Num6,
            "Num7" => Key::Num7,
            "Num8" => Key::Num8,
            "Num9" => Key::Num9,
            "Num0" => Key::Num0,
            "Minus" => Key::Minus,
            "Equal" => Key::Equal,
            "Q" => Key::Q,
            "W" => Key::W,
            "E" => Key::E,
            "R" => Key::R,
            "T" => Key::T,
            "Y" => Key::Y,
            "U" => Key::U,
            "I" => Key::I,
            "O" => Key::O,
            "P" => Key::P,
            "A" => Key::A,
            "S" => Key::S,
            "D" => Key::D,
            "F" => Key::F,
            "G" => Key::G,
            "H" => Key::H,
            "J" => Key::J,
            "K" => Key::K,
            "L" => Key::L,
            "Z" => Key::Z,
            "X" => Key::X,
            "C" => Key::C,
            "V" => Key::V,
            "B" => Key::B,
            "N" => Key::N,
            "M" => Key::M,
            "SemiColon" => Key::SemiColon,
            "Quote" => Key::Quote,
            "BackSlash" => Key::BackSlash,
            "Comma" => Key::Comma,
            "Dot" => Key::Dot,
            "Slash" => Key::Slash,
            "KpMinus" => Key::KpMinus,
            "KpPlus" => Key::KpPlus,
            "KpMultiply" => Key::KpMultiply,
            "KpDivide" => Key::KpDivide,
            "Kp0" => Key::Kp0,
            "Kp1" => Key::Kp1,
            "Kp2" => Key::Kp2,
            "Kp3" => Key::Kp3,
            "Kp4" => Key::Kp4,
            "Kp5" => Key::Kp5,
            "Kp6" => Key::Kp6,
            "Kp7" => Key::Kp7,
            "Kp8" => Key::Kp8,
            "Kp9" => Key::Kp9,
            "KpDelete" => Key::KpDelete,
            "BackQuote" => Key::BackQuote,
            "Insert" => Key::Insert,
            "PrintScreen" => Key::PrintScreen,
            "ScrollLock" => Key::ScrollLock,
            "Pause" => Key::Pause,
            "NumLock" => Key::NumLock,
            _ => return Err(anyhow!("Unsupported key")),
        };
        Ok(key)
    }
}

impl From<Key> for PythonKey {
    fn from(key: Key) -> Self {
        match key {
            Key::Alt => "Alt",
            Key::Backspace => "Backspace",
            Key::CapsLock => "CapsLock",
            Key::Control => "Control",
            Key::Delete => "Delete",
            Key::DownArrow => "DownArrow",
            Key::End => "End",
            Key::Escape => "Escape",
            Key::F1 => "F1",
            Key::F2 => "F2",
            Key::F3 => "F3",
            Key::F4 => "F4",
            Key::F5 => "F5",
            Key::F6 => "F6",
            Key::F7 => "F7",
            Key::F8 => "F8",
            Key::F9 => "F9",
            Key::F10 => "F10",
            Key::F11 => "F11",
            Key::F12 => "F12",
            Key::F13 => "F13",
            Key::F14 => "F14",
            Key::F15 => "F15",
            Key::F16 => "F16",
            Key::F17 => "F17",
            Key::F18 => "F18",
            Key::F19 => "F19",
            Key::F20 => "F20",
            Key::Home => "Home",
            Key::LeftArrow => "LeftArrow",
            Key::Meta => "Meta",
            Key::PageDown => "PageDown",
            Key::PageUp => "PageUp",
            Key::Return => "Return",
            Key::RightArrow => "RightArrow",
            Key::Shift => "Shift",
            Key::Space => "Space",
            Key::Tab => "Tab",
            Key::UpArrow => "UpArrow",
            Key::LeftBracket => "LeftBracket",
            Key::RightBracket => "RightBracket",
            Key::Num1 => "Num1",
            Key::Num2 => "Num2",
            Key::Num3 => "Num3",
            Key::Num4 => "Num4",
            Key::Num5 => "Num5",
            Key::Num6 => "Num6",
            Key::Num7 => "Num7",
            Key::Num8 => "Num8",
            Key::Num9 => "Num9",
            Key::Num0 => "Num0",
            Key::Minus => "Minus",
            Key::Equal => "Equal",
            Key::Q => "Q",
            Key::W => "W",
            Key::E => "E",
            Key::R => "R",
            Key::T => "T",
            Key::Y => "Y",
            Key::U => "U",
            Key::I => "I",
            Key::O => "O",
            Key::P => "P",
            Key::A => "A",
            Key::S => "S",
            Key::D => "D",
            Key::F => "F",
            Key::G => "G",
            Key::H => "H",
            Key::J => "J",
            Key::K => "K",
            Key::L => "L",
            Key::Z => "Z",
            Key::X => "X",
            Key::C => "C",
            Key::V => "V",
            Key::B => "B",
            Key::N => "N",
            Key::M => "M",
            Key::SemiColon => "SemiColon",
            Key::Quote => "Quote",
            Key::BackSlash => "BackSlash",
            Key::Comma => "Comma",
            Key::Dot => "Dot",
            Key::Slash => "Slash",
            Key::KpMinus => "KpMinus",
            Key::KpPlus => "KpPlus",
            Key::KpMultiply => "KpMultiply",
            Key::KpDivide => "KpDivide",
            Key::Kp0 => "Kp0",
            Key::Kp1 => "Kp1",
            Key::Kp2 => "Kp2",
            Key::Kp3 => "Kp3",
            Key::Kp4 => "Kp4",
            Key::Kp5 => "Kp5",
            Key::Kp6 => "Kp6",
            Key::Kp7 => "Kp7",
            Key::Kp8 => "Kp8",
            Key::Kp9 => "Kp9",
            Key::KpDelete => "KpDelete",
            Key::BackQuote => "BackQuote",
            Key::Insert => "Insert",
            Key::PrintScreen => "PrintScreen",
            Key::ScrollLock => "ScrollLock",
            Key::Pause => "Pause",
            Key::NumLock => "NumLock",
        }
        .to_string()
    }
}
